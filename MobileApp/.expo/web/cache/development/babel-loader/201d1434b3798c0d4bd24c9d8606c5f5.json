{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isVisible\", \"children\", \"style\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Screen, screensEnabled, shouldUseActivityState } from 'react-native-screens';\nvar FAR_FAR_AWAY = 30000;\n\nexport default function ResourceSavingScene(_ref) {\n  var isVisible = _ref.isVisible,\n    children = _ref.children,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  if (screensEnabled !== null && screensEnabled !== void 0 && screensEnabled() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return (\n        React.createElement(Screen, _extends({\n          activityState: isVisible ? 2 : 0,\n          style: style\n        }, rest), children)\n      );\n    } else {\n      return (\n        React.createElement(Screen, _extends({\n          active: isVisible ? 1 : 0,\n          style: style\n        }, rest), children)\n      );\n    }\n  }\n  if (Platform.OS === 'web') {\n    return React.createElement(View, _extends({\n      hidden: !isVisible,\n      style: [{\n        display: isVisible ? 'flex' : 'none'\n      }, styles.container, style],\n      pointerEvents: isVisible ? 'auto' : 'none'\n    }, rest), children);\n  }\n  return React.createElement(View, {\n    style: [styles.container, style],\n\n    pointerEvents: isVisible ? 'auto' : 'none'\n  }, React.createElement(View, {\n    collapsable: false,\n    removeClippedSubviews:\n    Platform.OS === 'ios' ? !isVisible : true,\n    pointerEvents: isVisible ? 'auto' : 'none',\n    style: isVisible ? styles.attached : styles.detached\n  }, children));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["React","Screen","screensEnabled","shouldUseActivityState","FAR_FAR_AWAY","ResourceSavingScene","isVisible","children","style","rest","Platform","OS","display","styles","container","attached","detached","create","flex","overflow","top"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAAA;AAEA,SACEC,MADF,EAEEC,cAFF,EAIEC,sBAJF,QAKO,sBALP;AAcA,IAAMC,YAAY,GAAG,KAArB;;AAEA,eAAe,SAASC,mBAAT,OAKL;EAAA,IAJRC,SAD0C,QAC1CA,SAD0C;IAE1CC,QAF0C,QAE1CA,QAF0C;IAG1CC,KAH0C,QAG1CA,KAH0C;IAIvCC,IAAAA;EAGH,IAAIP,cAAc,KAAA,IAAdA,IAAAA,cAAc,KAAA,KAAA,CAAdA,IAAAA,cAAc,EAAA,IAAQQ,QAAQ,CAACC,EAATD,KAAgB,KAA1C,EAAiD;IAC/C,IAAIP,sBAAJ,EAA4B;MAC1B;QAEE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAA,QAAA,CAAA;UAAQ,aAAa,EAAEG,SAAS,GAAG,CAAH,GAAO,CAAvC;UAA0C,KAAK,EAAEE;QAAjD,CAAA,EAA4DC,IAA5D,CAAA,EACGF,QADH;MAAA;IAIH,CAPD,MAOO;MACL;QAEE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAA,QAAA,CAAA;UAAQ,MAAM,EAAED,SAAS,GAAG,CAAH,GAAO,CAAhC;UAAmC,KAAK,EAAEE;QAA1C,CAAA,EAAqDC,IAArD,CAAA,EACGF,QADH;MAAA;IAIH;EACF;EAED,IAAIG,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;IACzB,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA,QAAA,CAAA;MAEE,MAAM,EAAE,CAACJ,SAFX;MAGE,KAAK,EAAE,CACL;QAAEM,OAAO,EAAEN,SAAS,GAAG,MAAH,GAAY;MAAhC,CADK,EAELO,MAAM,CAACC,SAFF,EAGLN,KAHK,CAHT;MAQE,aAAa,EAAEF,SAAS,GAAG,MAAH,GAAY;IARtC,CAAA,EASMG,IATN,CAAA,EAWGF,QAXH,CADF;EAeD;EAED,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;IACE,KAAK,EAAE,CAACM,MAAM,CAACC,SAAR,EAAmBN,KAAnB,CADT;;IAGE,aAAa,EAAEF,SAAS,GAAG,MAAH,GAAY;EAHtC,CAAA,EAKE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;IACE,WAAW,EAAE,KADf;IAEE,qBAAqB;IAGnBI,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,GAAwB,CAACJ,SAAzBI,GAAqC,IALzC;IAOE,aAAa,EAAEJ,SAAS,GAAG,MAAH,GAAY,MAPtC;IAQE,KAAK,EAAEA,SAAS,GAAGO,MAAM,CAACE,QAAV,GAAqBF,MAAM,CAACG;EAR9C,CAAA,EAUGT,QAVH,CALF,CADF;AAoBD;AAED,IAAMM,MAAM,GAAG,UAAU,CAACI,MAAX,CAAkB;EAC/BH,SAAS,EAAE;IACTI,IAAI,EAAE,CADG;IAETC,QAAQ,EAAE;EAFD,CADoB;EAK/BJ,QAAQ,EAAE;IACRG,IAAI,EAAE;EADE,CALqB;EAQ/BF,QAAQ,EAAE;IACRE,IAAI,EAAE,CADE;IAERE,GAAG,EAAEhB;EAFG;AARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  isVisible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  // react-native-screens is buggy on web\n  if (screensEnabled?.() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen activityState={isVisible ? 2 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen active={isVisible ? 1 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    }\n  }\n\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!isVisible}\n        style={[\n          { display: isVisible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={isVisible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        style={isVisible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}